library(scales)
library(skimr)
library(tidyverse)
daily_activity <- read.csv("Fitabase Data 4.12.16-5.12.16/dailyActivity_merged.csv")
daily_sleep <- read.csv("Fitabase Data 4.12.16-5.12.16/sleepDay_merged.csv")
heartrate_seconds <- read.csv("Fitabase Data 4.12.16-5.12.16/heartrate_seconds_merged.csv")
hourly_calories <- read.csv("Fitabase Data 4.12.16-5.12.16/hourlyCalories_merged.csv")
hourly_intensities <- read.csv("Fitabase Data 4.12.16-5.12.16/hourlyIntensities_merged.csv")
hourly_step <- read.csv("Fitabase Data 4.12.16-5.12.16/hourlySteps_merged.csv")
minutes_sleep <- read.csv("Fitabase Data 4.12.16-5.12.16/minuteSleep_merged.csv")
weight <- read.csv("Fitabase Data 4.12.16-5.12.16/weightLogInfo_merged.csv")
#Check unique ID
n_unique(heartrate_seconds$Id)
n_unique(weight$Id)
n_unique(daily_sleep$Id)
n_unique(minutes_sleep$Id)
hourly_activity <- merge(
merge(hourly_calories, hourly_intensities, by=c('Id'='Id', 'ActivityHour'='ActivityHour'), all=TRUE),
hourly_step, by=c('Id'='Id', 'ActivityHour'='ActivityHour'), all=TRUE)
daily_activity <- daily_activity %>%
rename(Date = ActivityDate) %>%
mutate(Date = as.Date(Date, format = "%m/%d/%Y"))
hourly_activity <- hourly_activity %>%
rename(Datetime = ActivityHour) %>%
mutate(Datetime = as.POSIXct(Datetime, format = "%m/%d/%Y %I:%M:%S %p"))
hourly_activity$Time <- format(hourly_activity$Datetime, format = "%H:%M:%S")
hourly_activity$Date <- as.Date(hourly_activity$Datetime, format = "%Y-%m-%d")
daily_sleep <- daily_sleep %>%
rename(Date = SleepDay) %>%
mutate(Date = as.Date(Date, format = "%m/%d/%Y"))
minutes_sleep <- minutes_sleep %>%
rename(Datetime = date) %>%
mutate(Datetime = as.POSIXct(Datetime, format = "%m/%d/%Y %I:%M:%S %p"))
sum(duplicated(daily_activity[,1:2]))
sum(duplicated(hourly_activity[,1:2]))
sum(duplicated(daily_sleep[,1:2]))
sum(duplicated(minutes_sleep[,1:2]))
is.null(daily_activity)
is.null(hourly_activity)
is.null(minutes_sleep)
is.null(daily_sleep)
daily_sleep <- daily_sleep %>%
distinct(Id, Date, .keep_all = TRUE)
minutes_sleep <- minutes_sleep %>%
distinct(Id, Datetime, .keep_all = TRUE)
daily_activity <- merge(daily_activity, daily_sleep, by=c('Id'='Id', 'Date'='Date'), all.x=TRUE)
# Compare Sedentary Minutes column between rows with sleep data and rows without sleep data
modified_daily_activity <- daily_activity %>%
select(Id, SedentaryMinutes, LightlyActiveMinutes, FairlyActiveMinutes, VeryActiveMinutes, TotalMinutesAsleep, TotalTimeInBed, Calories) %>%
mutate(TotalTimeBed = if_else(is.na(TotalTimeInBed), SedentaryMinutes + LightlyActiveMinutes + FairlyActiveMinutes + VeryActiveMinutes, SedentaryMinutes + LightlyActiveMinutes + FairlyActiveMinutes + VeryActiveMinutes + TotalTimeInBed)) %>%
mutate(TotalTimeAsleep = if_else(is.na(TotalMinutesAsleep), SedentaryMinutes + LightlyActiveMinutes + FairlyActiveMinutes + VeryActiveMinutes, SedentaryMinutes + LightlyActiveMinutes + FairlyActiveMinutes + VeryActiveMinutes + TotalMinutesAsleep)) %>%
mutate(HasSleepData = if_else(is.na(TotalMinutesAsleep), "0", "1")) %>%
mutate(Equal1440 = if_else(TotalTimeAsleep == 1440, "1", "0"))
modified_daily_activity %>%
group_by(HasSleepData) %>%
summarise(AverageSedentaryMinutes = mean(SedentaryMinutes)) %>%
ggplot(aes(x=HasSleepData, y=AverageSedentaryMinutes)) +
geom_bar(stat="identity", fill="blue", color="black") +
theme_classic() +
labs(x="Status of Sleep Data", "Average Sedentary Minutes", title="How Missing Sleep Data Affects Sedentary Minutes") +
scale_x_discrete(labels = c("Missing","Present"))
# Percentage of data that adds up to 1440 minutes or 1 day
modified_daily_activity %>%
filter(TotalTimeBed == 1440) %>%
nrow() / 940 * 100
# TotalTimeBed column is the total for when the total time calculation use TotalTimeInBed
# TotalTimeAsleep column use TotalMinutesAsleep column instead of TotalTimeInBed
# Equal1440 checks if TotalTimeBed is equal to 1440
# Has SleepData check if sleep data is present
modified_daily_activity %>%
select(TotalTimeBed, TotalTimeAsleep, HasSleepData, Equal1440)
# Check to see if there are any correlation between a the presence of sleep data and whether or not it adds up to 1440 minutes
modified_daily_activity %>%
select(Id, SedentaryMinutes, TotalTimeInBed, TotalMinutesAsleep, TotalTimeBed, TotalTimeAsleep, HasSleepData, Equal1440) %>%
group_by(HasSleepData, Equal1440) %>%
tally() -> count_for_sleep
count_for_sleep$Name <- c("No Sleep & Not Equal 1440", "No Sleep & Equal 1440", "Sleep Data & Not Equal 1440", "Sleep Data & Equal 1440")
count_for_sleep %>%
rename(Count = n) %>%
ggplot(aes(x=Name, y=Count)) +
geom_bar(stat = "identity", color="black", fill ="blue") +
theme_classic() +
labs(x="Category", title="Comparing Occurence of Sleeping Data with Occurence of Total Time Adding Up to 1440 Minutes")
# Calculate average time slept
daily_sleep %>%
summarise(Average_Time_Slept = mean(TotalTimeInBed))
# Catergorize users in Very Ac Fairly Active, Lightly Active or Sedimentary
average_time_in_bed <- mean(daily_sleep$TotalTimeInBed)
activity_score_function <- function(sedentary, lightly, fairly, very) {
average_activity_score <- (lightly + 2 * fairly + 3 * very)
return(average_activity_score)
}
modified_daily_activity <- modified_daily_activity %>%
mutate(ModifiedSedentaryMinutes = if_else(is.na(TotalTimeInBed), SedentaryMinutes - as.integer(average_time_in_bed), SedentaryMinutes)) %>%
select(Id, ModifiedSedentaryMinutes, LightlyActiveMinutes, FairlyActiveMinutes, VeryActiveMinutes) %>%
group_by(Id) %>%
summarise(Sedentary = mean(ModifiedSedentaryMinutes), Lightly = mean(LightlyActiveMinutes), Fairly = mean(FairlyActiveMinutes), Very = mean(VeryActiveMinutes))
activity_threshold <- modified_daily_activity %>%
colMeans(modified_daily_activity$Lightly)
modified_daily_activity <- modified_daily_activity %>%
mutate(Overall_Fitness = case_when(
between(activity_score_function(Sedentary, Lightly, Fairly, Very), 0, 60) ~ "Sedentary",
between(activity_score_function(Sedentary, Lightly, Fairly, Very), 61, 180) ~ "Light Active",
between(activity_score_function(Sedentary, Lightly, Fairly, Very), 181, 300) ~ "Fairly Active",
activity_score_function(Sedentary, Lightly, Fairly, Very) > 300 ~ "Very Active"
))
modified_daily_activity
# Catergorize users in Very Ac Fairly Active, Lightly Active or Sedimentary
average_time_in_bed <- mean(daily_sleep$TotalTimeInBed)
activity_score_function <- function(sedentary, lightly, fairly, very) {
average_activity_score <- (lightly + 2 * fairly + 3 * very)
return(average_activity_score)
}
modified_daily_activity <- modified_daily_activity %>%
mutate(ModifiedSedentaryMinutes = if_else(is.na(TotalTimeInBed), SedentaryMinutes - as.integer(average_time_in_bed), SedentaryMinutes)) %>%
select(Id, ModifiedSedentaryMinutes, LightlyActiveMinutes, FairlyActiveMinutes, VeryActiveMinutes) %>%
group_by(Id) %>%
summarise(Sedentary = mean(ModifiedSedentaryMinutes), Lightly = mean(LightlyActiveMinutes), Fairly = mean(FairlyActiveMinutes), Very = mean(VeryActiveMinutes))
daily_activity <- read.csv("Fitabase Data 4.12.16-5.12.16/dailyActivity_merged.csv")
daily_sleep <- read.csv("Fitabase Data 4.12.16-5.12.16/sleepDay_merged.csv")
heartrate_seconds <- read.csv("Fitabase Data 4.12.16-5.12.16/heartrate_seconds_merged.csv")
hourly_calories <- read.csv("Fitabase Data 4.12.16-5.12.16/hourlyCalories_merged.csv")
hourly_intensities <- read.csv("Fitabase Data 4.12.16-5.12.16/hourlyIntensities_merged.csv")
hourly_step <- read.csv("Fitabase Data 4.12.16-5.12.16/hourlySteps_merged.csv")
minutes_sleep <- read.csv("Fitabase Data 4.12.16-5.12.16/minuteSleep_merged.csv")
weight <- read.csv("Fitabase Data 4.12.16-5.12.16/weightLogInfo_merged.csv")
#Check unique ID
n_unique(heartrate_seconds$Id)
n_unique(weight$Id)
n_unique(daily_sleep$Id)
n_unique(minutes_sleep$Id)
hourly_activity <- merge(
merge(hourly_calories, hourly_intensities, by=c('Id'='Id', 'ActivityHour'='ActivityHour'), all=TRUE),
hourly_step, by=c('Id'='Id', 'ActivityHour'='ActivityHour'), all=TRUE)
daily_activity <- daily_activity %>%
rename(Date = ActivityDate) %>%
mutate(Date = as.Date(Date, format = "%m/%d/%Y"))
hourly_activity <- hourly_activity %>%
rename(Datetime = ActivityHour) %>%
mutate(Datetime = as.POSIXct(Datetime, format = "%m/%d/%Y %I:%M:%S %p"))
hourly_activity$Time <- format(hourly_activity$Datetime, format = "%H:%M:%S")
hourly_activity$Date <- as.Date(hourly_activity$Datetime, format = "%Y-%m-%d")
daily_sleep <- daily_sleep %>%
rename(Date = SleepDay) %>%
mutate(Date = as.Date(Date, format = "%m/%d/%Y"))
minutes_sleep <- minutes_sleep %>%
rename(Datetime = date) %>%
mutate(Datetime = as.POSIXct(Datetime, format = "%m/%d/%Y %I:%M:%S %p"))
sum(duplicated(daily_activity[,1:2]))
sum(duplicated(hourly_activity[,1:2]))
sum(duplicated(daily_sleep[,1:2]))
sum(duplicated(minutes_sleep[,1:2]))
is.null(daily_activity)
is.null(hourly_activity)
is.null(minutes_sleep)
is.null(daily_sleep)
daily_sleep <- daily_sleep %>%
distinct(Id, Date, .keep_all = TRUE)
minutes_sleep <- minutes_sleep %>%
distinct(Id, Datetime, .keep_all = TRUE)
daily_activity <- merge(daily_activity, daily_sleep, by=c('Id'='Id', 'Date'='Date'), all.x=TRUE)
# Compare Sedentary Minutes column between rows with sleep data and rows without sleep data
modified_daily_activity <- daily_activity %>%
select(Id, SedentaryMinutes, LightlyActiveMinutes, FairlyActiveMinutes, VeryActiveMinutes, TotalMinutesAsleep, TotalTimeInBed, Calories) %>%
mutate(TotalTimeBed = if_else(is.na(TotalTimeInBed), SedentaryMinutes + LightlyActiveMinutes + FairlyActiveMinutes + VeryActiveMinutes, SedentaryMinutes + LightlyActiveMinutes + FairlyActiveMinutes + VeryActiveMinutes + TotalTimeInBed)) %>%
mutate(TotalTimeAsleep = if_else(is.na(TotalMinutesAsleep), SedentaryMinutes + LightlyActiveMinutes + FairlyActiveMinutes + VeryActiveMinutes, SedentaryMinutes + LightlyActiveMinutes + FairlyActiveMinutes + VeryActiveMinutes + TotalMinutesAsleep)) %>%
mutate(HasSleepData = if_else(is.na(TotalMinutesAsleep), "0", "1")) %>%
mutate(Equal1440 = if_else(TotalTimeAsleep == 1440, "1", "0"))
modified_daily_activity %>%
group_by(HasSleepData) %>%
summarise(AverageSedentaryMinutes = mean(SedentaryMinutes)) %>%
ggplot(aes(x=HasSleepData, y=AverageSedentaryMinutes)) +
geom_bar(stat="identity", fill="blue", color="black") +
theme_classic() +
labs(x="Status of Sleep Data", "Average Sedentary Minutes", title="How Missing Sleep Data Affects Sedentary Minutes") +
scale_x_discrete(labels = c("Missing","Present"))
# Percentage of data that adds up to 1440 minutes or 1 day
modified_daily_activity %>%
filter(TotalTimeBed == 1440) %>%
nrow() / 940 * 100
# TotalTimeBed column is the total for when the total time calculation use TotalTimeInBed
# TotalTimeAsleep column use TotalMinutesAsleep column instead of TotalTimeInBed
# Equal1440 checks if TotalTimeBed is equal to 1440
# Has SleepData check if sleep data is present
modified_daily_activity %>%
select(TotalTimeBed, TotalTimeAsleep, HasSleepData, Equal1440)
# Check to see if there are any correlation between a the presence of sleep data and whether or not it adds up to 1440 minutes
modified_daily_activity %>%
select(Id, SedentaryMinutes, TotalTimeInBed, TotalMinutesAsleep, TotalTimeBed, TotalTimeAsleep, HasSleepData, Equal1440) %>%
group_by(HasSleepData, Equal1440) %>%
tally() -> count_for_sleep
count_for_sleep$Name <- c("No Sleep & Not Equal 1440", "No Sleep & Equal 1440", "Sleep Data & Not Equal 1440", "Sleep Data & Equal 1440")
count_for_sleep %>%
rename(Count = n) %>%
ggplot(aes(x=Name, y=Count)) +
geom_bar(stat = "identity", color="black", fill ="blue") +
theme_classic() +
labs(x="Category", title="Comparing Occurence of Sleeping Data with Occurence of Total Time Adding Up to 1440 Minutes")
# Calculate average time slept
daily_sleep %>%
summarise(Average_Time_Slept = mean(TotalTimeInBed))
# Catergorize users in Very Ac Fairly Active, Lightly Active or Sedimentary
average_time_in_bed <- mean(daily_sleep$TotalTimeInBed)
activity_score_function <- function(sedentary, lightly, fairly, very) {
average_activity_score <- (lightly + 2 * fairly + 3 * very)
return(average_activity_score)
}
modified_daily_activity <- modified_daily_activity %>%
mutate(ModifiedSedentaryMinutes = if_else(is.na(TotalTimeInBed), SedentaryMinutes - as.integer(average_time_in_bed), SedentaryMinutes)) %>%
select(Id, ModifiedSedentaryMinutes, LightlyActiveMinutes, FairlyActiveMinutes, VeryActiveMinutes) %>%
group_by(Id) %>%
summarise(Sedentary = mean(ModifiedSedentaryMinutes), Lightly = mean(LightlyActiveMinutes), Fairly = mean(FairlyActiveMinutes), Very = mean(VeryActiveMinutes))
activity_threshold <- modified_daily_activity %>%
colMeans(modified_daily_activity$Lightly)
modified_daily_activity <- modified_daily_activity %>%
mutate(Overall_Fitness = case_when(
between(activity_score_function(Sedentary, Lightly, Fairly, Very), 0, 60) ~ "Sedentary",
between(activity_score_function(Sedentary, Lightly, Fairly, Very), 61, 180) ~ "Light Active",
between(activity_score_function(Sedentary, Lightly, Fairly, Very), 181, 300) ~ "Fairly Active",
activity_score_function(Sedentary, Lightly, Fairly, Very) > 300 ~ "Very Active"
))
modified_daily_activity
# Create pie plot based on user activity level
activity_minute_distribution <- data.frame(
total = table(modified_daily_activity$Overall_Fitness),
percentage = scales::percent(round(c(table(modified_daily_activity$Overall_Fitness)) / sum(table(modified_daily_activity$Overall_Fitness)), 2))) %>%
rename(ActivityLevel = total.Var1) %>%
rename(Frequency = total.Freq)
ggplot(activity_minute_distribution, aes(x="", y=Frequency, fill=ActivityLevel)) +
geom_bar(stat="identity", width=2, color="black") +
coord_polar("y", start=0) +
theme_void() +
theme(plot.title = element_text(hjust = 0.6, size=14, face = "bold")) +
geom_text(aes(label=percentage), color="black", size=3,  position = position_stack(vjust = 0.5)) +
labs(title="Activity Level Distribtion", caption="Distribution of user's average activity levels")
# Create histogram showing average
active_hours <- hourly_activity %>%
select(Time, TotalIntensity) %>%
group_by(Time) %>%
summarise(AverageTotalIntensity = mean(TotalIntensity))
ggplot(active_hours, aes(x=Time, y=AverageTotalIntensity, fill=AverageTotalIntensity)) +
geom_histogram(stat="identity", color="white") +
coord_flip() +
labs(title="Activity Level Distribtion",x="Hour of the Day", y="Average Total Intensity") +
scale_fill_gradient(low = "green", high = "red") +
theme_classic()
hourly_activity %>%
select(Id, Datetime, TotalIntensity) %>%
mutate(Weekday = weekdays(Datetime)) %>%
group_by(Weekday) %>%
summarise(AverageTotalIntensity = mean(TotalIntensity))
daily_sleep %>%
mutate(MinutesAwake  = TotalTimeInBed - TotalMinutesAsleep) %>%
group_by(Id) %>%
summarise(AverageMinutesAwake = mean(MinutesAwake))
daily_sleep %>%
mutate(MinutesAwake  = TotalTimeInBed - TotalMinutesAsleep) %>%
group_by(Id) %>%
summarise(AverageMinutesAwake = mean(MinutesAwake))
daily_sleep %>%
mutate(MinutesAwake  = TotalTimeInBed - TotalMinutesAsleep) %>%
summarise(AverageMinutesAwake = mean(MinutesAwake))
total_intensity_daily <- hourly_activity %>%
group_by(Id, Date) %>%
summarise(DailyIntensity = sum(TotalIntensity))
total_intensity_and_sleep_table <- daily_activity %>%
drop_na() %>%
mutate(TotalSleepRecords = as.character(TotalSleepRecords)) %>%
merge(total_intensity_daily, by=c('Id'='Id', 'Date'='Date'), all.x=TRUE)
ggplot(total_intensity_and_sleep_table, aes(x=DailyIntensity, y=TotalTimeInBed, color=TotalSleepRecords)) +
geom_point() +
geom_smooth(method=lm , color="red", se=TRUE) +
labs(title="Time Spent in Bed After a Day of Activity", x="Daily Intensity", y="Time Spent in Bed (minutes)") +
theme_classic()
daily_activity %>%
filter(!LoggedActivitiesDistance == 0)
#
modified_daily_activity %>%
select(Id, SedentaryMinutes, Calories) %>%
filter(SedentaryMinutes == 1440)
#
modified_daily_activity %>%
select(Id, SedentaryMinutes, Calories) %>%
filter(SedentaryMinutes == 1440)
#
daily_activity %>%
select(Id, SedentaryMinutes, Calories) %>%
filter(SedentaryMinutes == 1440)
View(daily_activity)
knitr::include_graphics("images/bellalogo.jpeg")
options(width = 60)
library(dbplyr)
library(scales)
library(skimr)
library(tidyverse)
daily_activity <- read.csv("Fitabase Data 4.12.16-5.12.16/dailyActivity_merged.csv")
daily_sleep <- read.csv("Fitabase Data 4.12.16-5.12.16/sleepDay_merged.csv")
heartrate_seconds <- read.csv("Fitabase Data 4.12.16-5.12.16/heartrate_seconds_merged.csv")
hourly_calories <- read.csv("Fitabase Data 4.12.16-5.12.16/hourlyCalories_merged.csv")
hourly_intensities <- read.csv("Fitabase Data 4.12.16-5.12.16/hourlyIntensities_merged.csv")
hourly_step <- read.csv("Fitabase Data 4.12.16-5.12.16/hourlySteps_merged.csv")
minutes_sleep <- read.csv("Fitabase Data 4.12.16-5.12.16/minuteSleep_merged.csv")
weight <- read.csv("Fitabase Data 4.12.16-5.12.16/weightLogInfo_merged.csv")
#Check unique ID
n_unique(heartrate_seconds$Id)
n_unique(weight$Id)
n_unique(daily_sleep$Id)
n_unique(minutes_sleep$Id)
hourly_activity <- merge(
merge(hourly_calories, hourly_intensities, by=c('Id'='Id', 'ActivityHour'='ActivityHour'), all=TRUE),
hourly_step, by=c('Id'='Id', 'ActivityHour'='ActivityHour'), all=TRUE)
daily_activity <- daily_activity %>%
rename(Date = ActivityDate) %>%
mutate(Date = as.Date(Date, format = "%m/%d/%Y"))
hourly_activity <- hourly_activity %>%
rename(Datetime = ActivityHour) %>%
mutate(Datetime = as.POSIXct(Datetime, format = "%m/%d/%Y %I:%M:%S %p"))
hourly_activity$Time <- format(hourly_activity$Datetime, format = "%H:%M:%S")
hourly_activity$Date <- as.Date(hourly_activity$Datetime, format = "%Y-%m-%d")
daily_sleep <- daily_sleep %>%
rename(Date = SleepDay) %>%
mutate(Date = as.Date(Date, format = "%m/%d/%Y"))
minutes_sleep <- minutes_sleep %>%
rename(Datetime = date) %>%
mutate(Datetime = as.POSIXct(Datetime, format = "%m/%d/%Y %I:%M:%S %p"))
sum(duplicated(daily_activity[,1:2]))
sum(duplicated(hourly_activity[,1:2]))
sum(duplicated(daily_sleep[,1:2]))
sum(duplicated(minutes_sleep[,1:2]))
is.null(daily_activity)
is.null(hourly_activity)
is.null(minutes_sleep)
is.null(daily_sleep)
daily_sleep <- daily_sleep %>%
distinct(Id, Date, .keep_all = TRUE)
minutes_sleep <- minutes_sleep %>%
distinct(Id, Datetime, .keep_all = TRUE)
daily_activity <- merge(daily_activity, daily_sleep, by=c('Id'='Id', 'Date'='Date'), all.x=TRUE)
# Compare Sedentary Minutes column between rows with sleep data and rows without sleep data
modified_daily_activity <- daily_activity %>%
select(Id, SedentaryMinutes, LightlyActiveMinutes, FairlyActiveMinutes, VeryActiveMinutes, TotalMinutesAsleep, TotalTimeInBed, Calories) %>%
mutate(TotalTimeBed = if_else(is.na(TotalTimeInBed), SedentaryMinutes + LightlyActiveMinutes + FairlyActiveMinutes + VeryActiveMinutes, SedentaryMinutes + LightlyActiveMinutes + FairlyActiveMinutes + VeryActiveMinutes + TotalTimeInBed)) %>%
mutate(TotalTimeAsleep = if_else(is.na(TotalMinutesAsleep), SedentaryMinutes + LightlyActiveMinutes + FairlyActiveMinutes + VeryActiveMinutes, SedentaryMinutes + LightlyActiveMinutes + FairlyActiveMinutes + VeryActiveMinutes + TotalMinutesAsleep)) %>%
mutate(HasSleepData = if_else(is.na(TotalMinutesAsleep), "0", "1")) %>%
mutate(Equal1440 = if_else(TotalTimeAsleep == 1440, "1", "0"))
modified_daily_activity %>%
group_by(HasSleepData) %>%
summarise(AverageSedentaryMinutes = mean(SedentaryMinutes)) %>%
ggplot(aes(x=HasSleepData, y=AverageSedentaryMinutes)) +
geom_bar(stat="identity", fill="blue", color="black") +
theme_classic() +
labs(x="Status of Sleep Data", "Average Sedentary Minutes", title="How Missing Sleep Data Affects Sedentary Minutes") +
scale_x_discrete(labels = c("Missing","Present"))
# Percentage of data that adds up to 1440 minutes or 1 day
modified_daily_activity %>%
filter(TotalTimeBed == 1440) %>%
nrow() / 940 * 100
# TotalTimeBed column is the total for when the total time calculation use TotalTimeInBed
# TotalTimeAsleep column use TotalMinutesAsleep column instead of TotalTimeInBed
# Equal1440 checks if TotalTimeBed is equal to 1440
# Has SleepData check if sleep data is present
modified_daily_activity %>%
select(TotalTimeBed, TotalTimeAsleep, HasSleepData, Equal1440)
# Check to see if there are any correlation between a the presence of sleep data and whether or not it adds up to 1440 minutes
modified_daily_activity %>%
select(Id, SedentaryMinutes, TotalTimeInBed, TotalMinutesAsleep, TotalTimeBed, TotalTimeAsleep, HasSleepData, Equal1440) %>%
group_by(HasSleepData, Equal1440) %>%
tally() -> count_for_sleep
count_for_sleep$Name <- c("No Sleep & Not Equal 1440", "No Sleep & Equal 1440", "Sleep Data & Not Equal 1440", "Sleep Data & Equal 1440")
count_for_sleep %>%
rename(Count = n) %>%
ggplot(aes(x=Name, y=Count)) +
geom_bar(stat = "identity", color="black", fill ="blue") +
theme_classic() +
labs(x="Category", title="Comparing Occurence of Sleeping Data with Occurence of Total Time Adding Up to 1440 Minutes")
# Calculate average time slept
daily_sleep %>%
summarise(Average_Time_Slept = mean(TotalTimeInBed))
# Categorize users in Very Active, Fairly Active, Lightly Active or Sedimentary Activity level
average_time_in_bed <- mean(daily_sleep$TotalTimeInBed)
activity_score_function <- function(sedentary, lightly, fairly, very) {
average_activity_score <- (lightly + 2 * fairly + 3 * very)
return(average_activity_score)
}
modified_daily_activity <- modified_daily_activity %>%
mutate(ModifiedSedentaryMinutes = if_else(is.na(TotalTimeInBed), SedentaryMinutes - as.integer(average_time_in_bed), SedentaryMinutes)) %>%
select(Id, ModifiedSedentaryMinutes, LightlyActiveMinutes, FairlyActiveMinutes, VeryActiveMinutes) %>%
group_by(Id) %>%
summarise(Sedentary = mean(ModifiedSedentaryMinutes), Lightly = mean(LightlyActiveMinutes), Fairly = mean(FairlyActiveMinutes), Very = mean(VeryActiveMinutes))
activity_threshold <- modified_daily_activity %>%
colMeans(modified_daily_activity$Lightly)
modified_daily_activity <- modified_daily_activity %>%
mutate(Overall_Fitness = case_when(
between(activity_score_function(Sedentary, Lightly, Fairly, Very), 0, 60) ~ "Sedentary",
between(activity_score_function(Sedentary, Lightly, Fairly, Very), 61, 180) ~ "Light Active",
between(activity_score_function(Sedentary, Lightly, Fairly, Very), 181, 300) ~ "Fairly Active",
activity_score_function(Sedentary, Lightly, Fairly, Very) > 300 ~ "Very Active"
))
modified_daily_activity
# Create pie plot based on user activity level
activity_minute_distribution <- data.frame(
total = table(modified_daily_activity$Overall_Fitness),
percentage = scales::percent(round(c(table(modified_daily_activity$Overall_Fitness)) / sum(table(modified_daily_activity$Overall_Fitness)), 2))) %>%
rename(ActivityLevel = total.Var1) %>%
rename(Frequency = total.Freq)
ggplot(activity_minute_distribution, aes(x="", y=Frequency, fill=ActivityLevel)) +
geom_bar(stat="identity", width=2, color="black") +
coord_polar("y", start=0) +
theme_void() +
theme(plot.title = element_text(hjust = 0.6, size=14, face = "bold")) +
geom_text(aes(label=percentage), color="black", size=3,  position = position_stack(vjust = 0.5)) +
labs(title="Activity Level Distribtion", caption="Distribution of user's average activity levels")
# Create histogram showing average total intensity for each hour
active_hours <- hourly_activity %>%
select(Time, TotalIntensity) %>%
group_by(Time) %>%
summarise(AverageTotalIntensity = mean(TotalIntensity))
ggplot(active_hours, aes(x=Time, y=AverageTotalIntensity, fill=AverageTotalIntensity)) +
geom_histogram(stat="identity", color="white") +
coord_flip() +
labs(title="Activity Level Distribtion",x="Hour of the Day", y="Average Total Intensity") +
scale_fill_gradient(low = "green", high = "red") +
theme_classic()
# Find average total intensity each week days
hourly_activity %>%
select(Id, Datetime, TotalIntensity) %>%
mutate(Weekday = weekdays(Datetime)) %>%
group_by(Weekday) %>%
summarise(AverageTotalIntensity = mean(TotalIntensity))
daily_sleep %>%
mutate(MinutesAwake  = TotalTimeInBed - TotalMinutesAsleep) %>%
summarise(AverageMinutesAwake = mean(MinutesAwake))
daily_sleep %>%
mutate(MinutesAwake  = TotalTimeInBed - TotalMinutesAsleep) %>%
group_by(Id) %>%
summarise(AverageMinutesAwake = mean(MinutesAwake))
# Create plot to check correlation between time spent in bed and total intensity for that day
total_intensity_daily <- hourly_activity %>%
group_by(Id, Date) %>%
summarise(DailyIntensity = sum(TotalIntensity))
total_intensity_and_sleep_table <- daily_activity %>%
drop_na() %>%
mutate(TotalSleepRecords = as.character(TotalSleepRecords)) %>%
merge(total_intensity_daily, by=c('Id'='Id', 'Date'='Date'), all.x=TRUE)
ggplot(total_intensity_and_sleep_table, aes(x=DailyIntensity, y=TotalTimeInBed, color=TotalSleepRecords)) +
geom_point() +
geom_smooth(method=lm , color="red", se=TRUE) +
labs(title="Time Spent in Bed After a Day of Activity", x="Daily Intensity", y="Time Spent in Bed (minutes)") +
theme_classic()
# List of entries with LoggedActivityDistance greater than 0
daily_activity %>%
filter(!LoggedActivitiesDistance == 0)
# Check entries where users was sedentary for whole day
daily_activity %>%
select(Id, SedentaryMinutes, Calories) %>%
filter(SedentaryMinutes == 1440)
# Check entries where users was sedentary for whole day
daily_activity %>%
select(Id, SedentaryMinutes, Calories) %>%
filter(SedentaryMinutes == 1440)
View(activity_minute_distribution)
View(modified_daily_activity)
View(hourly_activity)
View(hourly_calories)
View(hourly_calories)
View(hourly_intensities)
View(minutes_sleep)
View(modified_daily_activity)
View(active_hours)
View(modified_daily_activity)
# Create histogram showing average total intensity for each hour
active_hours <- hourly_activity %>%
select(Time, TotalIntensity) %>%
group_by(Time) %>%
summarise(AverageTotalIntensity = mean(TotalIntensity))
ggplot(active_hours, aes(x=Time, y=AverageTotalIntensity, fill=AverageTotalIntensity)) +
geom_histogram(stat="identity", color="white") +
coord_flip() +
labs(title="Activity Level Distribution",x="Hour of the Day", y="Average Total Intensity") +
scale_fill_gradient(low = "green", high = "red") +
theme_classic()
View(hourly_activity)
View(heartrate_seconds)
View(total_intensity_daily)
View(total_intensity_daily)
View(weight)
View(total_intensity_and_sleep_table)
View(hourly_step)
View(modified_daily_activity)
View(hourly_activity)
View(hourly_activity)
View(hourly_intensities)
View(hourly_calories)
View(hourly_activity)
View(daily_sleep)
View(active_hours)
View(activity_minute_distribution)
View(active_hours)
View(activity_minute_distribution)
View(count_for_sleep)
View(daily_activity)
View(total_intensity_daily)
View(total_intensity_and_sleep_table)
View(activity_minute_distribution)
View(count_for_sleep)
View(daily_activity)
View(daily_sleep)
View(daily_sleep)
View(heartrate_seconds)
View(hourly_activity)
View(hourly_intensities)
q()
